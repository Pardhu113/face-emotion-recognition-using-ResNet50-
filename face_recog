{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":321},"executionInfo":{"elapsed":38508,"status":"error","timestamp":1743848006942,"user":{"displayName":"King","userId":"11527598404997134044"},"user_tz":-330},"id":"QZRFwhTqWwFW","outputId":"c03513e8-9007-4e48-84ae-18b0b2ea1ea9"},"outputs":[{"ename":"MessageError","evalue":"Error: credential propagation was unsuccessful","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mMessageError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-1-392b61b145f3\u003e\u001b[0m in \u001b[0;36m\u003ccell line: 0\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdrive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----\u003e 4\u001b[0;31m \u001b[0mdrive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36mmount\u001b[0;34m(mountpoint, force_remount, timeout_ms, readonly)\u001b[0m\n\u001b[1;32m     98\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmountpoint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mforce_remount\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m120000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreadonly\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     99\u001b[0m   \u001b[0;34m\"\"\"Mount your Google Drive at the specified mountpoint path.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 100\u001b[0;31m   return _mount(\n\u001b[0m\u001b[1;32m    101\u001b[0m       \u001b[0mmountpoint\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    102\u001b[0m       \u001b[0mforce_remount\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mforce_remount\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36m_mount\u001b[0;34m(mountpoint, force_remount, timeout_ms, ephemeral, readonly)\u001b[0m\n\u001b[1;32m    135\u001b[0m   )\n\u001b[1;32m    136\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mephemeral\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 137\u001b[0;31m     _message.blocking_request(\n\u001b[0m\u001b[1;32m    138\u001b[0m         \u001b[0;34m'request_auth'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    139\u001b[0m         \u001b[0mrequest\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'authType'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'dfs_ephemeral'\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mblocking_request\u001b[0;34m(request_type, request, timeout_sec, parent)\u001b[0m\n\u001b[1;32m    174\u001b[0m       \u001b[0mrequest_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrequest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparent\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexpect_reply\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    175\u001b[0m   )\n\u001b[0;32m--\u003e 176\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mread_reply_from_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_sec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mread_reply_from_input\u001b[0;34m(message_id, timeout_sec)\u001b[0m\n\u001b[1;32m    101\u001b[0m     ):\n\u001b[1;32m    102\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0;34m'error'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mreply\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 103\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mMessageError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreply\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'error'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    104\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mreply\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'data'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    105\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mMessageError\u001b[0m: Error: credential propagation was unsuccessful"]}],"source":["# prompt: connect with drive\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n"]},{"cell_type":"code","execution_count":2,"metadata":{"executionInfo":{"elapsed":6975,"status":"ok","timestamp":1743848022825,"user":{"displayName":"King","userId":"11527598404997134044"},"user_tz":-330},"id":"wj-mkFkrXTmL"},"outputs":[],"source":["# Importing libraries for data handling, visualization, and deep learning\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import warnings\n","import glob\n","from skimage.io import imread\n","import cv2\n","from PIL import Image\n","from skimage.transform import resize\n","import itertools\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.model_selection import train_test_split\n","from tensorflow.keras.optimizers import Adam\n","from keras.metrics import categorical_crossentropy\n","from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras.applications import ResNet50\n","from tensorflow.keras import layers, models\n","from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import classification_report\n","from tensorflow.keras.models import save_model"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":1507,"status":"ok","timestamp":1743848050429,"user":{"displayName":"King","userId":"11527598404997134044"},"user_tz":-330},"id":"D6iPu4KWXXyp"},"outputs":[],"source":["df = pd.read_csv('/content/drive/MyDrive/face emotion dataset/emotions.csv')\n"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":645},"executionInfo":{"elapsed":796,"status":"ok","timestamp":1743848055079,"user":{"displayName":"King","userId":"11527598404997134044"},"user_tz":-330},"id":"GLFxR8kPXo5e","outputId":"c40292f8-48f1-482d-cd6a-01074caf2442"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"df\",\n  \"rows\": 19,\n  \"fields\": [\n    {\n      \"column\": \"set_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 0,\n        \"max\": 18,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          0,\n          5,\n          11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"MALE\",\n          \"FEMALE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 15,\n        \"max\": 49,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          15,\n          20\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"RU\",\n          \"PH\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"df"},"text/html":["\n","  \u003cdiv id=\"df-58bb7dff-b39f-4802-9440-1e479c2d0d04\" class=\"colab-df-container\"\u003e\n","    \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003eset_id\u003c/th\u003e\n","      \u003cth\u003egender\u003c/th\u003e\n","      \u003cth\u003eage\u003c/th\u003e\n","      \u003cth\u003ecountry\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e0\u003c/th\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003eFEMALE\u003c/td\u003e\n","      \u003ctd\u003e36\u003c/td\u003e\n","      \u003ctd\u003eRU\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e1\u003c/th\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003eFEMALE\u003c/td\u003e\n","      \u003ctd\u003e37\u003c/td\u003e\n","      \u003ctd\u003eRU\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2\u003c/th\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003eFEMALE\u003c/td\u003e\n","      \u003ctd\u003e36\u003c/td\u003e\n","      \u003ctd\u003eRU\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e3\u003c/th\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","      \u003ctd\u003eMALE\u003c/td\u003e\n","      \u003ctd\u003e29\u003c/td\u003e\n","      \u003ctd\u003eRU\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e4\u003c/th\u003e\n","      \u003ctd\u003e4\u003c/td\u003e\n","      \u003ctd\u003eFEMALE\u003c/td\u003e\n","      \u003ctd\u003e43\u003c/td\u003e\n","      \u003ctd\u003eRU\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e5\u003c/th\u003e\n","      \u003ctd\u003e5\u003c/td\u003e\n","      \u003ctd\u003eMALE\u003c/td\u003e\n","      \u003ctd\u003e49\u003c/td\u003e\n","      \u003ctd\u003eRU\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e6\u003c/th\u003e\n","      \u003ctd\u003e6\u003c/td\u003e\n","      \u003ctd\u003eFEMALE\u003c/td\u003e\n","      \u003ctd\u003e38\u003c/td\u003e\n","      \u003ctd\u003eRU\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e7\u003c/th\u003e\n","      \u003ctd\u003e7\u003c/td\u003e\n","      \u003ctd\u003eMALE\u003c/td\u003e\n","      \u003ctd\u003e19\u003c/td\u003e\n","      \u003ctd\u003ePH\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e8\u003c/th\u003e\n","      \u003ctd\u003e8\u003c/td\u003e\n","      \u003ctd\u003eFEMALE\u003c/td\u003e\n","      \u003ctd\u003e29\u003c/td\u003e\n","      \u003ctd\u003eRU\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e9\u003c/th\u003e\n","      \u003ctd\u003e9\u003c/td\u003e\n","      \u003ctd\u003eFEMALE\u003c/td\u003e\n","      \u003ctd\u003e32\u003c/td\u003e\n","      \u003ctd\u003eRU\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e10\u003c/th\u003e\n","      \u003ctd\u003e10\u003c/td\u003e\n","      \u003ctd\u003eMALE\u003c/td\u003e\n","      \u003ctd\u003e33\u003c/td\u003e\n","      \u003ctd\u003eIN\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e11\u003c/th\u003e\n","      \u003ctd\u003e11\u003c/td\u003e\n","      \u003ctd\u003eFEMALE\u003c/td\u003e\n","      \u003ctd\u003e15\u003c/td\u003e\n","      \u003ctd\u003eRU\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e12\u003c/th\u003e\n","      \u003ctd\u003e12\u003c/td\u003e\n","      \u003ctd\u003eFEMALE\u003c/td\u003e\n","      \u003ctd\u003e34\u003c/td\u003e\n","      \u003ctd\u003eRU\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e13\u003c/th\u003e\n","      \u003ctd\u003e13\u003c/td\u003e\n","      \u003ctd\u003eFEMALE\u003c/td\u003e\n","      \u003ctd\u003e43\u003c/td\u003e\n","      \u003ctd\u003eRU\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e14\u003c/th\u003e\n","      \u003ctd\u003e14\u003c/td\u003e\n","      \u003ctd\u003eFEMALE\u003c/td\u003e\n","      \u003ctd\u003e20\u003c/td\u003e\n","      \u003ctd\u003eRU\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e15\u003c/th\u003e\n","      \u003ctd\u003e15\u003c/td\u003e\n","      \u003ctd\u003eFEMALE\u003c/td\u003e\n","      \u003ctd\u003e18\u003c/td\u003e\n","      \u003ctd\u003eRU\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e16\u003c/th\u003e\n","      \u003ctd\u003e16\u003c/td\u003e\n","      \u003ctd\u003eFEMALE\u003c/td\u003e\n","      \u003ctd\u003e37\u003c/td\u003e\n","      \u003ctd\u003eRU\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e17\u003c/th\u003e\n","      \u003ctd\u003e17\u003c/td\u003e\n","      \u003ctd\u003eFEMALE\u003c/td\u003e\n","      \u003ctd\u003e24\u003c/td\u003e\n","      \u003ctd\u003eRU\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e18\u003c/th\u003e\n","      \u003ctd\u003e18\u003c/td\u003e\n","      \u003ctd\u003eMALE\u003c/td\u003e\n","      \u003ctd\u003e19\u003c/td\u003e\n","      \u003ctd\u003eRU\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e\n","    \u003cdiv class=\"colab-df-buttons\"\u003e\n","\n","  \u003cdiv class=\"colab-df-container\"\u003e\n","    \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-58bb7dff-b39f-4802-9440-1e479c2d0d04')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\"\u003e\n","\n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\"\u003e\n","    \u003cpath d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/\u003e\n","  \u003c/svg\u003e\n","    \u003c/button\u003e\n","\n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","    \u003cscript\u003e\n","      const buttonEl =\n","        document.querySelector('#df-58bb7dff-b39f-4802-9440-1e479c2d0d04 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-58bb7dff-b39f-4802-9440-1e479c2d0d04');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    \u003c/script\u003e\n","  \u003c/div\u003e\n","\n","\n","\u003cdiv id=\"df-193ab551-5150-4a84-bf94-bd5e377f18c1\"\u003e\n","  \u003cbutton class=\"colab-df-quickchart\" onclick=\"quickchart('df-193ab551-5150-4a84-bf94-bd5e377f18c1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\"\u003e\n","\n","\u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\"\u003e\n","    \u003cg\u003e\n","        \u003cpath d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/\u003e\n","    \u003c/g\u003e\n","\u003c/svg\u003e\n","  \u003c/button\u003e\n","\n","\u003cstyle\u003e\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","\u003c/style\u003e\n","\n","  \u003cscript\u003e\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() =\u003e {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-193ab551-5150-4a84-bf94-bd5e377f18c1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  \u003c/script\u003e\n","\u003c/div\u003e\n","\n","  \u003cdiv id=\"id_ad777c42-4d5e-4011-a6c3-490d91a2ec92\"\u003e\n","    \u003cstyle\u003e\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    \u003c/style\u003e\n","    \u003cbutton class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\"\u003e\n","\n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\"\u003e\n","    \u003cpath d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/\u003e\n","  \u003c/svg\u003e\n","    \u003c/button\u003e\n","    \u003cscript\u003e\n","      (() =\u003e {\n","      const buttonEl =\n","        document.querySelector('#id_ad777c42-4d5e-4011-a6c3-490d91a2ec92 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () =\u003e {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    \u003c/script\u003e\n","  \u003c/div\u003e\n","\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n"],"text/plain":["    set_id  gender  age country\n","0        0  FEMALE   36      RU\n","1        1  FEMALE   37      RU\n","2        2  FEMALE   36      RU\n","3        3    MALE   29      RU\n","4        4  FEMALE   43      RU\n","5        5    MALE   49      RU\n","6        6  FEMALE   38      RU\n","7        7    MALE   19      PH\n","8        8  FEMALE   29      RU\n","9        9  FEMALE   32      RU\n","10      10    MALE   33      IN\n","11      11  FEMALE   15      RU\n","12      12  FEMALE   34      RU\n","13      13  FEMALE   43      RU\n","14      14  FEMALE   20      RU\n","15      15  FEMALE   18      RU\n","16      16  FEMALE   37      RU\n","17      17  FEMALE   24      RU\n","18      18    MALE   19      RU"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["df"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1743848059260,"user":{"displayName":"King","userId":"11527598404997134044"},"user_tz":-330},"id":"i4mQOEyXYHZl","outputId":"6bb02863-1800-409f-b458-5a51a7892f97"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"set_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.6373924166890665,\n        \"min\": 0.0,\n        \"max\": 19.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          19.0,\n          9.0,\n          13.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.92680539364939,\n        \"min\": 9.683288794172414,\n        \"max\": 49.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          31.105263157894736,\n          33.0,\n          19.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe"},"text/html":["\n","  \u003cdiv id=\"df-2abfe710-23b4-42e5-b368-98892398d2cd\" class=\"colab-df-container\"\u003e\n","    \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003eset_id\u003c/th\u003e\n","      \u003cth\u003eage\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003ecount\u003c/th\u003e\n","      \u003ctd\u003e19.000000\u003c/td\u003e\n","      \u003ctd\u003e19.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003emean\u003c/th\u003e\n","      \u003ctd\u003e9.000000\u003c/td\u003e\n","      \u003ctd\u003e31.105263\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003estd\u003c/th\u003e\n","      \u003ctd\u003e5.627314\u003c/td\u003e\n","      \u003ctd\u003e9.683289\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003emin\u003c/th\u003e\n","      \u003ctd\u003e0.000000\u003c/td\u003e\n","      \u003ctd\u003e15.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e25%\u003c/th\u003e\n","      \u003ctd\u003e4.500000\u003c/td\u003e\n","      \u003ctd\u003e22.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e50%\u003c/th\u003e\n","      \u003ctd\u003e9.000000\u003c/td\u003e\n","      \u003ctd\u003e33.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e75%\u003c/th\u003e\n","      \u003ctd\u003e13.500000\u003c/td\u003e\n","      \u003ctd\u003e37.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003emax\u003c/th\u003e\n","      \u003ctd\u003e18.000000\u003c/td\u003e\n","      \u003ctd\u003e49.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e\n","    \u003cdiv class=\"colab-df-buttons\"\u003e\n","\n","  \u003cdiv class=\"colab-df-container\"\u003e\n","    \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2abfe710-23b4-42e5-b368-98892398d2cd')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\"\u003e\n","\n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\"\u003e\n","    \u003cpath d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/\u003e\n","  \u003c/svg\u003e\n","    \u003c/button\u003e\n","\n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","    \u003cscript\u003e\n","      const buttonEl =\n","        document.querySelector('#df-2abfe710-23b4-42e5-b368-98892398d2cd button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2abfe710-23b4-42e5-b368-98892398d2cd');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    \u003c/script\u003e\n","  \u003c/div\u003e\n","\n","\n","\u003cdiv id=\"df-3a5746bd-c5a7-4157-8b2d-9d611d7dcb12\"\u003e\n","  \u003cbutton class=\"colab-df-quickchart\" onclick=\"quickchart('df-3a5746bd-c5a7-4157-8b2d-9d611d7dcb12')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\"\u003e\n","\n","\u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\"\u003e\n","    \u003cg\u003e\n","        \u003cpath d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/\u003e\n","    \u003c/g\u003e\n","\u003c/svg\u003e\n","  \u003c/button\u003e\n","\n","\u003cstyle\u003e\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","\u003c/style\u003e\n","\n","  \u003cscript\u003e\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() =\u003e {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3a5746bd-c5a7-4157-8b2d-9d611d7dcb12 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  \u003c/script\u003e\n","\u003c/div\u003e\n","\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n"],"text/plain":["          set_id        age\n","count  19.000000  19.000000\n","mean    9.000000  31.105263\n","std     5.627314   9.683289\n","min     0.000000  15.000000\n","25%     4.500000  22.000000\n","50%     9.000000  33.000000\n","75%    13.500000  37.000000\n","max    18.000000  49.000000"]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["# Descriptive statistics of the dataset\n","df.describe()"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3114,"status":"ok","timestamp":1743848066044,"user":{"displayName":"King","userId":"11527598404997134044"},"user_tz":-330},"id":"nkkx2RW9YgA8","outputId":"e9928890-e56a-4272-8130-5d145d5f70c0"},"outputs":[{"name":"stdout","output_type":"stream","text":["Total images found: 152\n","First 5 images: ['/content/drive/MyDrive/face emotion dataset/images/8/Disgust.jpg', '/content/drive/MyDrive/face emotion dataset/images/8/Contempt.jpg', '/content/drive/MyDrive/face emotion dataset/images/8/Sad.jpg', '/content/drive/MyDrive/face emotion dataset/images/8/Neutral.jpg', '/content/drive/MyDrive/face emotion dataset/images/8/Surprised.jpg']\n"]}],"source":["import os\n","\n","# Root folder containing all emotion folders\n","root_folder = \"/content/drive/MyDrive/face emotion dataset/images\"\n","\n","# Get all image paths from subdirectories\n","image_paths = []\n","for root, dirs, files in os.walk(root_folder):\n","    for file in files:\n","        if file.lower().endswith(('.jpg', '.jpeg', '.png')):\n","            image_paths.append(os.path.join(root, file))\n","\n","# Sort or shuffle if needed\n","print(f\"Total images found: {len(image_paths)}\")\n","print(\"First 5 images:\", image_paths[:5])\n"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":515,"output_embedded_package_id":"1an3OL2GkHZEXsPAJFeg69IaEDGoeoxj0"},"executionInfo":{"elapsed":20837,"status":"ok","timestamp":1743848086876,"user":{"displayName":"King","userId":"11527598404997134044"},"user_tz":-330},"id":"KwJBmlXVY3Vg","outputId":"73857c43-0712-41d3-91f8-de81fb5a2866"},"outputs":[],"source":["import cv2\n","import matplotlib.pyplot as plt\n","\n","# Number of images to display\n","num_images = min(5, len(image_paths))\n","\n","# Create subplots\n","fig, axes = plt.subplots(1, num_images, figsize=(20, 10))\n","\n","for i in range(num_images):\n","    img = cv2.imread(image_paths[i])\n","\n","    if img is None:\n","        print(f\"Warning: Could not load image {image_paths[i]}\")\n","        continue\n","\n","    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Convert BGR to RGB\n","    axes[i].imshow(img)\n","    axes[i].set_title(os.path.basename(image_paths[i]))  # Display filename as title\n","    axes[i].axis('off')  # Hide axis\n","\n","plt.tight_layout()\n","plt.show()\n"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":537,"status":"ok","timestamp":1743848092349,"user":{"displayName":"King","userId":"11527598404997134044"},"user_tz":-330},"id":"sc6tuUJiZ-XE","outputId":"04dd2416-fd8b-4b8c-a4f0-6cf72dfda5f6"},"outputs":[{"name":"stdout","output_type":"stream","text":["                                                path emotion\n","0  /content/drive/MyDrive/face emotion dataset/im...       8\n","1  /content/drive/MyDrive/face emotion dataset/im...       8\n","2  /content/drive/MyDrive/face emotion dataset/im...       8\n","3  /content/drive/MyDrive/face emotion dataset/im...       8\n","4  /content/drive/MyDrive/face emotion dataset/im...       8\n"]}],"source":["# Creating a DataFrame for image paths and their respective emotions\n","image_data = pd.DataFrame(columns=['path', 'emotion'])\n","\n","for i, path in enumerate(image_paths):\n","    emotion = os.path.basename(os.path.dirname(path))  # Extract folder name as emotion\n","    image_data.loc[i] = [path, emotion]\n","\n","# Display first few rows\n","print(image_data.head())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_V_h6S5SakcS"},"outputs":[],"source":["# Just in case any folder names have stray slashes or whitespace\n","image_data['emotion'] = image_data['emotion'].str.strip().str.replace('/', '', regex=False)\n","# If folder names are numbers, map them to emotion labels\n","emotion_map = {\n","    '0': 'Anger',\n","    '1': 'Contempt',\n","    '2': 'Disgust',\n","    '3': 'Fear',\n","    '4': 'Happy',\n","    '5': 'Sad',\n","    '6': 'Surprised',\n","    '7': 'Neutral'\n","}\n","\n","image_data['emotion'] = image_data['emotion'].map(emotion_map)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":429,"output_embedded_package_id":"17hkuJ642WB8fE_nwKK4PrZBBxtDfqklP"},"executionInfo":{"elapsed":25257,"status":"ok","timestamp":1743831545098,"user":{"displayName":"King","userId":"11527598404997134044"},"user_tz":-330},"id":"IoRRJp4Qa1r6","outputId":"09b8ea5e-8950-49e4-93ad-d8f05c672408"},"outputs":[],"source":["import matplotlib.pyplot as plt\n","from matplotlib.image import imread\n","\n","# How many images to display (up to 40)\n","num_rows = 4\n","num_cols = 10\n","total_images = num_rows * num_cols\n","\n","# Handle the case where your dataset has fewer than 40 images\n","total_images = min(total_images, len(image_data))\n","\n","fig, axes = plt.subplots(num_rows, num_cols, figsize=(20, 10))\n","\n","for idx in range(total_images):\n","    i, j = divmod(idx, num_cols)  # Convert index to row and column\n","    try:\n","        image = imread(image_data.iloc[idx][\"path\"])\n","        label = image_data.iloc[idx][\"emotion\"]\n","\n","        axes[i, j].imshow(image)\n","        axes[i, j].set_title(label, fontsize=8)\n","        axes[i, j].axis('off')\n","    except Exception as e:\n","        print(f\"Error loading image at index {idx}: {e}\")\n","        axes[i, j].axis('off')\n","\n","plt.tight_layout(rect=[0, 0, 1, 0.96])\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":630},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1743831545098,"user":{"displayName":"King","userId":"11527598404997134044"},"user_tz":-330},"id":"OrCGCK-6a8kc","outputId":"a1f087c7-15a8-4bc3-a0c7-a73aafc446c7"},"outputs":[{"name":"stderr","output_type":"stream","text":["\u003cipython-input-15-ac744146d997\u003e:6: FutureWarning: \n","\n","Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n","\n","  sns.barplot(x=emotion_counts.index, y=emotion_counts.values, palette='pastel')\n"]},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 1000x600 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["# Compute emotion counts once\n","emotion_counts = image_data['emotion'].value_counts()\n","\n","# Plot\n","plt.figure(figsize=(10, 6))\n","sns.barplot(x=emotion_counts.index, y=emotion_counts.values, palette='pastel')\n","plt.title('Distribution of Emotions in Dataset')\n","plt.xlabel('Emotion')\n","plt.ylabel('Frequency')\n","plt.xticks(rotation=45)\n","plt.tight_layout()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"D-YI7U11bP5a"},"outputs":[],"source":["#Label Encoding\n","label_encoder = LabelEncoder()\n","image_data['emotion'] = label_encoder.fit_transform(image_data['emotion'])\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ambzKAGMbtet"},"outputs":[],"source":["#Loading \u0026 Resizing Images\n","X = []\n","y = []\n","for feature, label in image_data.values:\n","    image = cv2.imread(feature)\n","    image = cv2.resize(image, (224, 224), interpolation=cv2.INTER_LINEAR)\n","    X.append(image)\n","    y.append(label)\n","X = np.array(X)\n","y = np.array(y)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HolczrDibwaM"},"outputs":[],"source":["#Data Augmentation with ImageDataGenerator\n","datagen = ImageDataGenerator(\n","    rotation_range=30,\n","    width_shift_range=0.2,\n","    height_shift_range=0.2,\n","    shear_range=0.2,\n","    zoom_range=0.2,\n","    horizontal_flip=True,\n","    fill_mode='nearest'\n",")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AWv2Vkpqj8MN"},"outputs":[],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CqfMl5BTcD1y"},"outputs":[],"source":["#Generating Augmented Images\n","augmented_X = []\n","augmented_y = []\n","for i in range(len(X)):\n","    img = X[i].reshape((1, *X[i].shape))\n","    label = y[i]\n","    for _ in range(50):\n","        augmented = next(datagen.flow(img, batch_size=1))\n","        augmented_X.append(augmented[0])\n","        augmented_y.append(label)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hD-06I24cnzN"},"outputs":[],"source":["X = np.concatenate([X, augmented_X], axis=0)\n","y = np.concatenate([y, augmented_y], axis=0)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":435,"status":"ok","timestamp":1743831761773,"user":{"displayName":"King","userId":"11527598404997134044"},"user_tz":-330},"id":"1X3MyEMZdbs9","outputId":"6f85f1c0-fe00-49c4-9f2a-cfd88745018a"},"outputs":[{"name":"stdout","output_type":"stream","text":["Unique classes: [0 1 2 3 4 5 6 7 8]\n","Number of unique classes: 9\n"]}],"source":["print(\"Unique classes:\", np.unique(y))\n","print(\"Number of unique classes:\", len(np.unique(y)))\n","\n","\n","y_train = to_categorical(y_train, num_classes=9)\n","y_test = to_categorical(y_test, num_classes=9)\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":565,"status":"ok","timestamp":1743831792218,"user":{"displayName":"King","userId":"11527598404997134044"},"user_tz":-330},"id":"LoiZFB4cdb3w","outputId":"9a326bde-0f45-4d44-c45d-2ffa10669848"},"outputs":[{"name":"stdout","output_type":"stream","text":["Shape of X: (152, 224, 224, 3)\n","Shape of y: (152,)\n","Length of Training Data: 121\n","Length of Testing Data: 31\n"]}],"source":["print(f'Shape of X: {X.shape}')\n","print(f'Shape of y: {y.shape}')\n","print(f'Length of Training Data: {len(X_train)}')\n","print(f'Length of Testing Data: {len(X_test)}')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2272,"status":"ok","timestamp":1743831885211,"user":{"displayName":"King","userId":"11527598404997134044"},"user_tz":-330},"id":"kd9ssLltdb7R","outputId":"c3f032e3-e382-43bb-ec56-e54902b1ceea"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","\u001b[1m94765736/94765736\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n"]}],"source":["#building the model\n","import numpy as np\n","from tensorflow.keras.applications import ResNet50\n","from tensorflow.keras import models, layers\n","from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n","\n","# Set number of classes\n","NUM_CLASSES = len(np.unique(y))\n","\n","# Callbacks\n","early_stopping = EarlyStopping(\n","    monitor='val_accuracy', patience=10, mode='max', verbose=1, restore_best_weights=True\n",")\n","lr_reduction = ReduceLROnPlateau(\n","    monitor='val_accuracy', patience=3, mode='max', verbose=1, factor=0.5, min_lr=0.0001\n",")\n","\n","# Load base model\n","base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n","base_model.trainable = False\n","\n","# Build the model\n","model = models.Sequential([\n","    base_model,\n","    layers.GlobalAveragePooling2D(),\n","    layers.Dense(512, activation='relu'),\n","    layers.Dense(256, activation='relu'),\n","    layers.Dropout(0.3),\n","    layers.Dense(NUM_CLASSES, activation='softmax')\n","])\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"D4M-pb-DdcAO"},"outputs":[],"source":["model.compile(\n","    optimizer='adam',                          # Adaptive optimizer (works great for most cases)\n","    loss='categorical_crossentropy',           # Because you're doing multi-class classification\n","    metrics=['accuracy']                       # Track accuracy during training/validation\n",")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":337},"executionInfo":{"elapsed":1315,"status":"ok","timestamp":1743831958272,"user":{"displayName":"King","userId":"11527598404997134044"},"user_tz":-330},"id":"Yrled1zBe7-3","outputId":"bd681a57-2507-4ac4-ccc2-8b77bdbe53dd"},"outputs":[{"data":{"text/html":["\u003cpre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"\u003e\u003cspan style=\"font-weight: bold\"\u003eModel: \"sequential\"\u003c/span\u003e\n","\u003c/pre\u003e\n"],"text/plain":["\u001b[1mModel: \"sequential\"\u001b[0m\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["\u003cpre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"\u003e┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n","┃\u003cspan style=\"font-weight: bold\"\u003e Layer (type)                         \u003c/span\u003e┃\u003cspan style=\"font-weight: bold\"\u003e Output Shape                \u003c/span\u003e┃\u003cspan style=\"font-weight: bold\"\u003e         Param # \u003c/span\u003e┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n","│ resnet50 (\u003cspan style=\"color: #0087ff; text-decoration-color: #0087ff\"\u003eFunctional\u003c/span\u003e)                │ (\u003cspan style=\"color: #00d7ff; text-decoration-color: #00d7ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e7\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e7\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e2048\u003c/span\u003e)          │      \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e23,587,712\u003c/span\u003e │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ global_average_pooling2d             │ (\u003cspan style=\"color: #00d7ff; text-decoration-color: #00d7ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e2048\u003c/span\u003e)                │               \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e0\u003c/span\u003e │\n","│ (\u003cspan style=\"color: #0087ff; text-decoration-color: #0087ff\"\u003eGlobalAveragePooling2D\u003c/span\u003e)             │                             │                 │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense (\u003cspan style=\"color: #0087ff; text-decoration-color: #0087ff\"\u003eDense\u003c/span\u003e)                        │ (\u003cspan style=\"color: #00d7ff; text-decoration-color: #00d7ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e512\u003c/span\u003e)                 │       \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e1,049,088\u003c/span\u003e │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_1 (\u003cspan style=\"color: #0087ff; text-decoration-color: #0087ff\"\u003eDense\u003c/span\u003e)                      │ (\u003cspan style=\"color: #00d7ff; text-decoration-color: #00d7ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e256\u003c/span\u003e)                 │         \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e131,328\u003c/span\u003e │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dropout (\u003cspan style=\"color: #0087ff; text-decoration-color: #0087ff\"\u003eDropout\u003c/span\u003e)                    │ (\u003cspan style=\"color: #00d7ff; text-decoration-color: #00d7ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e256\u003c/span\u003e)                 │               \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e0\u003c/span\u003e │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_2 (\u003cspan style=\"color: #0087ff; text-decoration-color: #0087ff\"\u003eDense\u003c/span\u003e)                      │ (\u003cspan style=\"color: #00d7ff; text-decoration-color: #00d7ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e9\u003c/span\u003e)                   │           \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e2,313\u003c/span\u003e │\n","└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n","\u003c/pre\u003e\n"],"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n","│ resnet50 (\u001b[38;5;33mFunctional\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m2048\u001b[0m)          │      \u001b[38;5;34m23,587,712\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ global_average_pooling2d             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)                │               \u001b[38;5;34m0\u001b[0m │\n","│ (\u001b[38;5;33mGlobalAveragePooling2D\u001b[0m)             │                             │                 │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)                 │       \u001b[38;5;34m1,049,088\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)                 │         \u001b[38;5;34m131,328\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dropout (\u001b[38;5;33mDropout\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m9\u001b[0m)                   │           \u001b[38;5;34m2,313\u001b[0m │\n","└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["\u003cpre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"\u003e\u003cspan style=\"font-weight: bold\"\u003e Total params: \u003c/span\u003e\u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e24,770,441\u003c/span\u003e (94.49 MB)\n","\u003c/pre\u003e\n"],"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m24,770,441\u001b[0m (94.49 MB)\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["\u003cpre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"\u003e\u003cspan style=\"font-weight: bold\"\u003e Trainable params: \u003c/span\u003e\u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e1,182,729\u003c/span\u003e (4.51 MB)\n","\u003c/pre\u003e\n"],"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,182,729\u001b[0m (4.51 MB)\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["\u003cpre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"\u003e\u003cspan style=\"font-weight: bold\"\u003e Non-trainable params: \u003c/span\u003e\u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e23,587,712\u003c/span\u003e (89.98 MB)\n","\u003c/pre\u003e\n"],"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m23,587,712\u001b[0m (89.98 MB)\n"]},"metadata":{},"output_type":"display_data"}],"source":["model.summary()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":505586,"status":"ok","timestamp":1743832481836,"user":{"displayName":"King","userId":"11527598404997134044"},"user_tz":-330},"id":"1v1mfMsfe_VW","outputId":"a45a0371-6aaa-4373-8f07-7a790d4c9780"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/30\n","\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m50s\u001b[0m 9s/step - accuracy: 0.3930 - loss: 2.3159 - val_accuracy: 0.7419 - val_loss: 1.2381 - learning_rate: 0.0010\n","Epoch 2/30\n","\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 9s/step - accuracy: 0.7196 - loss: 0.8277 - val_accuracy: 0.6452 - val_loss: 0.7967 - learning_rate: 0.0010\n","Epoch 3/30\n","\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 9s/step - accuracy: 0.9180 - loss: 0.2983 - val_accuracy: 1.0000 - val_loss: 0.1239 - learning_rate: 0.0010\n","Epoch 4/30\n","\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m33s\u001b[0m 9s/step - accuracy: 0.9776 - loss: 0.1696 - val_accuracy: 1.0000 - val_loss: 0.0355 - learning_rate: 0.0010\n","Epoch 5/30\n","\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m27s\u001b[0m 7s/step - accuracy: 0.9838 - loss: 0.0744 - val_accuracy: 1.0000 - val_loss: 0.0512 - learning_rate: 0.0010\n","Epoch 6/30\n","\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5s/step - accuracy: 0.9836 - loss: 0.0420\n","Epoch 6: ReduceLROnPlateau reducing learning rate to 0.0005000000237487257.\n","\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 7s/step - accuracy: 0.9852 - loss: 0.0394 - val_accuracy: 1.0000 - val_loss: 0.0143 - learning_rate: 0.0010\n","Epoch 7/30\n","\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 7s/step - accuracy: 1.0000 - loss: 0.0167 - val_accuracy: 1.0000 - val_loss: 0.0108 - learning_rate: 5.0000e-04\n","Epoch 8/30\n","\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 7s/step - accuracy: 1.0000 - loss: 0.0113 - val_accuracy: 1.0000 - val_loss: 0.0068 - learning_rate: 5.0000e-04\n","Epoch 9/30\n","\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5s/step - accuracy: 1.0000 - loss: 0.0177\n","Epoch 9: ReduceLROnPlateau reducing learning rate to 0.0002500000118743628.\n","\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m34s\u001b[0m 9s/step - accuracy: 1.0000 - loss: 0.0167 - val_accuracy: 1.0000 - val_loss: 0.0058 - learning_rate: 5.0000e-04\n","Epoch 10/30\n","\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 9s/step - accuracy: 1.0000 - loss: 0.0076 - val_accuracy: 1.0000 - val_loss: 0.0054 - learning_rate: 2.5000e-04\n","Epoch 11/30\n","\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 9s/step - accuracy: 1.0000 - loss: 0.0081 - val_accuracy: 1.0000 - val_loss: 0.0053 - learning_rate: 2.5000e-04\n","Epoch 12/30\n","\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5s/step - accuracy: 1.0000 - loss: 0.0046\n","Epoch 12: ReduceLROnPlateau reducing learning rate to 0.0001250000059371814.\n","\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 9s/step - accuracy: 1.0000 - loss: 0.0045 - val_accuracy: 1.0000 - val_loss: 0.0050 - learning_rate: 2.5000e-04\n","Epoch 13/30\n","\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 9s/step - accuracy: 1.0000 - loss: 0.0040 - val_accuracy: 1.0000 - val_loss: 0.0049 - learning_rate: 1.2500e-04\n","Epoch 13: early stopping\n","Restoring model weights from the end of the best epoch: 3.\n"]}],"source":["# Training\n","history = model.fit(\n","    X_train, y_train,\n","    validation_data=(X_test, y_test),\n","    epochs=30,\n","    batch_size=32,\n","    callbacks=[early_stopping, lr_reduction]\n",")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10807,"status":"ok","timestamp":1743832575783,"user":{"displayName":"King","userId":"11527598404997134044"},"user_tz":-330},"id":"ZXcqnCuzfEBH","outputId":"464ff663-1f0b-4206-a35f-9e4f42086aec"},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 8s/step - accuracy: 1.0000 - loss: 0.1239\n","Test Accuracy: 1.0\n","Loss: 0.12391967326402664\n"]}],"source":["loss, accuracy = model.evaluate(X_test, y_test)\n","print(\"Test Accuracy:\", accuracy)\n","print(\"Loss:\", loss)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10133,"status":"ok","timestamp":1743832636231,"user":{"displayName":"King","userId":"11527598404997134044"},"user_tz":-330},"id":"i-c3fhk9hUDY","outputId":"589e625d-c079-4a00-e13e-d456989b2cf8"},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 10s/step\n","              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00         1\n","           1       1.00      1.00      1.00         3\n","           2       1.00      1.00      1.00         2\n","           4       1.00      1.00      1.00         3\n","           5       1.00      1.00      1.00         4\n","           6       1.00      1.00      1.00         1\n","           7       1.00      1.00      1.00         3\n","           8       1.00      1.00      1.00        14\n","\n","    accuracy                           1.00        31\n","   macro avg       1.00      1.00      1.00        31\n","weighted avg       1.00      1.00      1.00        31\n","\n"]}],"source":["# Classification report\n","y_pred = model.predict(X_test)                      # Get probabilities\n","y_test = np.argmax(y_test, axis=1)                  # One-hot → integer labels\n","y_pred_classes = np.argmax(y_pred, axis=1)          # Probabilities → predicted class\n","\n","print(classification_report(y_test, y_pred_classes))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":504},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1743832775789,"user":{"displayName":"King","userId":"11527598404997134044"},"user_tz":-330},"id":"lEzd6WGahi9g","outputId":"8b1ada75-dc4b-497f-b013-8c7495e192dc"},"outputs":[{"data":{"text/plain":["\u003cmatplotlib.legend.Legend at 0x7a3797e33650\u003e"]},"execution_count":32,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 1200x500 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["plt.figure(figsize=(12, 5))\n","\n","# Accuracy\n","plt.subplot(1, 2, 1)\n","plt.plot(history.history['accuracy'], label='Train Acc')\n","plt.plot(history.history['val_accuracy'], label='Val Acc')\n","plt.title('Model Accuracy')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"executionInfo":{"elapsed":601,"status":"ok","timestamp":1743832782908,"user":{"displayName":"King","userId":"11527598404997134044"},"user_tz":-330},"id":"VYU2TILHh_K9","outputId":"bba3ca81-f896-4bcb-879d-0a1e4f1072f6"},"outputs":[{"data":{"image/png":"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\n","text/plain":["\u003cFigure size 640x480 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["# Loss\n","plt.subplot(1, 2, 2)\n","plt.plot(history.history['loss'], label='Train Loss')\n","plt.plot(history.history['val_loss'], label='Val Loss')\n","plt.title('Model Loss')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.legend()\n","\n","plt.tight_layout()\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2408,"status":"ok","timestamp":1743832813035,"user":{"displayName":"King","userId":"11527598404997134044"},"user_tz":-330},"id":"OL9axP7fiJD4","outputId":"d5c72244-78ad-41bd-c50e-150a3bbe14e8"},"outputs":[{"name":"stderr","output_type":"stream","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]}],"source":["model.save(\"emotion_recognition_model.h5\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZV_vhX0jiQAl"},"outputs":[],"source":[]}],"metadata":{"colab":{"authorship_tag":"ABX9TyPCHMhoMnr2frqmUjNoFSkx","mount_file_id":"1g4zT5z8z7QuquDec_rIWFMWDS_wOT2aA","name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}